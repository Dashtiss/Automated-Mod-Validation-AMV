{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-05-24T21:57:37-05:00",
    "name": "Universal Modloader Egg",
    "author": "dashtissrr@gmail.com",
    "description": "A Universal minecraft server egg that will install forge, neoforge, or fabric depending on the env variable",
    "features": null,
    "docker_images": {
        "Java 8": "ghcr.io\/pterodactyl\/yolks:java_8",
        "Java 11": "ghcr.io\/pterodactyl\/yolks:java_11",
        "Java 16": "ghcr.io\/pterodactyl\/yolks:java_16",
        "Java 17": "ghcr.io\/pterodactyl\/yolks:java_17",
        "Java 18": "ghcr.io\/pterodactyl\/yolks:java_18",
        "Java 21": "ghcr.io\/pterodactyl\/yolks:java_21",
        "Java 22": "ghcr.io\/ptero-eggs\/yolks:java_22",
        "Java 23": "ghcr.io\/ptero-eggs\/yolks:java_23",
        "Java 24": "ghcr.io\/dashtiss\/yolks:java_24"
    },
    "file_denylist": [],
    "startup": "java -Xms128M -Xmx{{SERVER_MEMORY}}M -Dterminal.jline=false -Dterminal.ansi=true $( [[  ! -f unix_args.txt ]] && printf %s \"-jar {{SERVER_JARFILE}}\" || printf %s \"@unix_args.txt\" )",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"enable-query\": \"true\",\r\n            \"server-port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \")! For help, type \",\r\n    \"userInteraction\": [\r\n        \"Go to eula.txt for more info.\"\r\n    ]\r\n}",
        "logs": "{\r\n    \"custom\": false,\r\n    \"location\": \"logs\/latest.log\"\r\n}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\n# Pterodactyl Minecraft Server Installer Script\r\n# Author: Dashtiss\r\n# Version: 1.3.2 (Aligned with individual scripts, added snapshot support)\r\n# Description: Installs Minecraft (Vanilla, Fabric, Forge, NeoForge) based on environment variables.\r\n#              Designed for use in a Pterodactyl Egg's install script.\r\n#\r\n# Required Environment Variables:\r\n#   MINECRAFT_VERSION   (e.g., \"1.20.1\", \"1.19.4\", \"latest\", \"snapshot\")\r\n#   MOD_LOADER_TYPE     (e.g., \"vanilla\", \"fabric\", \"forge\", \"neoforge\")\r\n#   SERVER_JARFILE      (e.g., \"server.jar\") - The name of the server JAR file to use in startup command\r\n#\r\n# Optional Environment Variables:\r\n#   MODLOADER_VERSION   (e.g., \"0.15.7\" for Fabric, \"47.1.0\" or \"1.20.1-47.1.0\" for Forge, \"20.4.85-beta\" for NeoForge, \"latest\", \"snapshot\")\r\n#                       - Specific version for the chosen mod loader. If \"latest\" or \"snapshot\", attempts to auto-detect.\r\n#   FABRIC_INSTALLER_VERSION (e.g., \"0.11.2\", \"latest\") - Specific Fabric installer JAR version. Defaults to a known stable one.\r\n#                       - Only used if MOD_LOADER_TYPE is \"fabric\".\r\n\r\necho -e \"\\e[1;34m[INFO] Starting Minecraft server installation script...\\e[0m\"\r\n\r\n# --- Basic Startup ---\r\n# Ensure necessary system packages are updated and installed.\r\napt update\r\napt install -y curl jq unzip dos2unix wget\r\n\r\n# Create and navigate to the server directory.\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server || { echo -e \"\\e[31m[ERROR] Could not change to server directory: \/mnt\/server\\e[0m\"; exit 1; }\r\n\r\n# --- Configuration ---\r\nSERVER_DIR=\"\/mnt\/server\" # Pterodactyl's standard server directory\r\nJAVA_ARGS_FILE=\"${SERVER_DIR}\/user_jvm_args.txt\" # Common name for user-defined JVM args\r\nEULA_FILE=\"${SERVER_DIR}\/eula.txt\"\r\nINSTALLER_JAR_NAME=\"installer.jar\" # Temporary name for downloaded installers\r\nSERVER_JAR=\"${SERVER_JARFILE:-server.jar}\" # Use SERVER_JARFILE if set, default to server.jar if not\r\n\r\n# --- Helper Functions ---\r\nprint_error() {\r\n  echo -e \"\\e[31m[ERROR] $1\\e[0m\"\r\n  exit 1\r\n}\r\n\r\nprint_warning() {\r\n  echo -e \"\\e[33m[WARN] $1\\e[0m\"\r\n}\r\n\r\nprint_info() {\r\n  echo -e \"\\e[32m[INFO] $1\\e[0m\"\r\n}\r\n\r\n# Function to check if a command exists\r\ncommand_exists() {\r\n  command -v \"$1\" >\/dev\/null 2>&1\r\n}\r\n\r\n# Ensure necessary tools are available\r\ncheck_dependencies() {\r\n  print_info \"Checking dependencies (curl, jq, java)...\"\r\n  if ! command_exists curl; then\r\n    print_error \"curl is not installed. Please add it to your egg's Docker image.\"\r\n  fi\r\n  if ! command_exists jq; then\r\n    print_error \"jq is not installed. Please add it to your egg's Docker image.\"\r\n  fi\r\n  if ! command_exists java; then\r\n    print_error \"java is not installed. Please add it to your egg's Docker image.\"\r\n  fi\r\n  print_info \"All critical dependencies found.\"\r\n}\r\n\r\n# Function to get the latest Minecraft version (release or snapshot)\r\nget_latest_minecraft_version() {\r\n  local version_type=\"$1\" # \"release\" or \"snapshot\"\r\n  local version_manifest_list_url=\"https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest_v2.json\" \r\n  \r\n  # Redirect print_info calls to stderr so they don't pollute stdout (which is captured by assignment)\r\n  print_info \"Fetching latest Minecraft ${version_type} version from Mojang manifest (URL: ${version_manifest_list_url})...\" >&2 \r\n  local manifest_list_json=$(curl -sSLf \"$version_manifest_list_url\")\r\n  if [ $? -ne 0 ] || [ -z \"$manifest_list_json\" ]; then\r\n    print_error \"Failed to fetch version manifest list from Mojang to determine latest Minecraft version.\" >&2\r\n  fi\r\n\r\n  local latest_mc_version=\"\"\r\n  if [ \"$version_type\" == \"release\" ]; then\r\n    latest_mc_version=$(echo \"$manifest_list_json\" | jq -r '.latest.release')\r\n  elif [ \"$version_type\" == \"snapshot\" ]; then\r\n    latest_mc_version=$(echo \"$manifest_list_json\" | jq -r '.latest.snapshot')\r\n  fi\r\n\r\n  if [ -z \"$latest_mc_version\" ] || [ \"$latest_mc_version\" == \"null\" ]; then\r\n    print_error \"Could not determine the latest Minecraft ${version_type} version from Mojang manifest.\" >&2\r\n  fi\r\n  echo \"$latest_mc_version\" # Only echo the version number to stdout\r\n}\r\n\r\ncheck_minecraft_version_validity() {\r\n    local version=\"$1\"\r\n    local version_manifest_list_url=\"https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest_v2.json\"\r\n    \r\n    print_info \"Validating Minecraft version ${version}...\"\r\n    local manifest_list_json=$(curl -sSLf \"$version_manifest_list_url\")\r\n    if [ $? -ne 0 ] || [ -z \"$manifest_list_json\" ]; then\r\n        print_error \"Failed to fetch version manifest list from Mojang for validation.\"\r\n    fi\r\n\r\n    # Check if the version exists in the manifest\r\n    local version_exists=$(echo \"$manifest_list_json\" | jq -r --arg VERSION \"$version\" '.versions[] | select(.id == $VERSION) | .id')\r\n    if [ -z \"$version_exists\" ]; then\r\n        print_error \"Minecraft version ${version} does not exist or is not yet released. Please check the version number or use an older version.\"\r\n    fi\r\n    \r\n    # For very new versions, check if it's pre-release\/snapshot and warn user only for non-vanilla\r\n    local version_type=$(echo \"$manifest_list_json\" | jq -r --arg VERSION \"$version\" '.versions[] | select(.id == $VERSION) | .type')\r\n    if [ \"$version_type\" = \"snapshot\" ] || [ \"$version_type\" = \"pre_release\" ]; then\r\n        if [ \"${MOD_LOADER_TYPE}\" != \"vanilla\" ]; then\r\n            print_warning \"Warning: ${version} is a ${version_type}. It may not be supported by mod loaders yet.\"\r\n        fi\r\n    fi\r\n    \r\n    return 0\r\n}\r\n\r\ncheck_modloader_compatibility() {\r\n    local mc_version=\"$1\"\r\n    local loader_type=\"$2\"\r\n\r\n    # Vanilla always supports any valid Minecraft version\r\n    if [ \"${loader_type}\" == \"vanilla\" ]; then\r\n        print_info \"Vanilla installation selected - compatible with all Minecraft versions\"\r\n        return 0\r\n    fi\r\n\r\n    case \"${loader_type}\" in\r\n        fabric)\r\n            # First check if Fabric supports this version by trying to fetch loader versions\r\n            local fabric_game_versions_url=\"https:\/\/meta.fabricmc.net\/v2\/versions\/game\/yarn\"\r\n            local fabric_versions=$(curl -sSLf \"$fabric_game_versions_url\" || echo \"\")\r\n            if [ -z \"$fabric_versions\" ]; then\r\n                print_warning \"Could not verify Fabric compatibility - API may be down. Continuing anyway...\"\r\n                return 0\r\n            fi\r\n            \r\n            local version_supported=$(echo \"$fabric_versions\" | jq -r --arg VERSION \"$mc_version\" '.[] | select(.gameVersion == $VERSION) | .gameVersion')\r\n            if [ -z \"$version_supported\" ]; then\r\n                # Fallback to checking loader versions directly\r\n                local fabric_loader_versions_url=\"https:\/\/meta.fabricmc.net\/v2\/versions\/loader\/${mc_version}\"\r\n                local loader_check=$(curl -sSLf \"$fabric_loader_versions_url\" || echo \"\")\r\n                if [ -z \"$loader_check\" ] || [ \"$loader_check\" == \"[]\" ]; then\r\n                    print_warning \"Minecraft version ${mc_version} might not be supported by Fabric yet. Installation may fail.\"\r\n                    return 0\r\n                fi\r\n            fi\r\n            ;;\r\n        forge)\r\n            # First try checking promotions data\r\n            local forge_meta=$(curl -sSLf \"https:\/\/files.minecraftforge.net\/net\/minecraftforge\/forge\/promotions_slim.json\" || echo \"\")\r\n            if [ -n \"$forge_meta\" ]; then\r\n                local has_version=$(echo \"$forge_meta\" | jq -r --arg VERSION \"$mc_version\" 'keys[] | select(startswith($VERSION))' | head -n1)\r\n                if [ -n \"$has_version\" ]; then\r\n                    return 0\r\n                fi\r\n            fi\r\n            \r\n            print_warning \"Could not verify Forge compatibility for ${mc_version}. Installation may fail if version is not supported.\"\r\n            return 0\r\n            ;;\r\n        neoforge)\r\n            # Check NeoForge compatibility\r\n            local neoforge_meta=$(curl -sSLf \"https:\/\/maven.neoforged.net\/releases\/net\/neoforged\/neoforge\/promotions_slim.json\" || echo \"\")\r\n            if [ -z \"$neoforge_meta\" ]; then\r\n                print_warning \"Could not verify NeoForge compatibility - API may be down. Continuing anyway...\"\r\n                return 0\r\n            fi\r\n            \r\n            local has_version=$(echo \"$neoforge_meta\" | jq -r --arg VERSION \"$mc_version\" 'keys[] | select(startswith($VERSION))' | head -n1)\r\n            if [ -z \"$has_version\" ]; then\r\n                print_warning \"Minecraft version ${mc_version} might not be supported by NeoForge yet. Installation may fail.\"\r\n                return 0\r\n            fi\r\n            ;;\r\n        *)\r\n            print_error \"Unknown mod loader type: ${loader_type}\"\r\n            ;;\r\n    esac\r\n    print_info \"Minecraft version ${mc_version} appears compatible with ${loader_type}.\"\r\n    return 0\r\n}\r\n\r\ncheck_env_vars() {\r\n  print_info \"Validating environment variables...\"\r\n  if [ -z \"${MINECRAFT_VERSION}\" ]; then\r\n    print_error \"MINECRAFT_VERSION environment variable is not set.\"\r\n  fi\r\n  if [ -z \"${MOD_LOADER_TYPE}\" ]; then\r\n    print_error \"MOD_LOADER_TYPE environment variable is not set. Use 'vanilla', 'fabric', 'forge', or 'neoforge'.\"\r\n  fi\r\n  MOD_LOADER_TYPE=$(echo \"${MOD_LOADER_TYPE}\" | tr '[:upper:]' '[:lower:]') # Convert to lowercase\r\n\r\n  # Resolve \"latest\" or \"snapshot\" for Minecraft version early if needed\r\n  if [ \"${MINECRAFT_VERSION}\" == \"latest\" ]; then\r\n    print_info \"MINECRAFT_VERSION set to 'latest'. Auto-detecting latest release...\"\r\n    # Capture the output of the function into a temporary variable\r\n    local resolved_mc_version=$(get_latest_minecraft_version \"release\")\r\n    if [ -z \"$resolved_mc_version\" ]; then\r\n      print_error \"Failed to resolve 'latest' Minecraft version.\"\r\n    fi\r\n    MINECRAFT_VERSION=\"$resolved_mc_version\" # Assign the clean version to MINECRAFT_VERSION\r\n    print_info \"Resolved MINECRAFT_VERSION to: ${MINECRAFT_VERSION}\"\r\n  elif [ \"${MINECRAFT_VERSION}\" == \"snapshot\" ]; then\r\n    print_info \"MINECRAFT_VERSION set to 'snapshot'. Auto-detecting latest snapshot...\"\r\n    local resolved_mc_version=$(get_latest_minecraft_version \"snapshot\")\r\n    if [ -z \"$resolved_mc_version\" ]; then\r\n      print_error \"Failed to resolve 'snapshot' Minecraft version.\"\r\n    fi\r\n    MINECRAFT_VERSION=\"$resolved_mc_version\"\r\n    print_info \"Resolved MINECRAFT_VERSION to: ${MINECRAFT_VERSION}\"\r\n  fi\r\n\r\n  # After MINECRAFT_VERSION is resolved (either from direct input or latest\/snapshot)\r\n  # Validate the Minecraft version exists\r\n  check_minecraft_version_validity \"${MINECRAFT_VERSION}\"\r\n  \r\n  # Check if the chosen modloader supports this version\r\n  check_modloader_compatibility \"${MINECRAFT_VERSION}\" \"${MOD_LOADER_TYPE}\"\r\n\r\n  print_info \"Minecraft Version: ${MINECRAFT_VERSION}\"\r\n  print_info \"Mod Loader Type: ${MOD_LOADER_TYPE}\"\r\n  [ -n \"${MODLOADER_VERSION}\" ] && print_info \"Modloader Version: ${MODLOADER_VERSION}\"\r\n  if [ \"${MOD_LOADER_TYPE}\" == \"fabric\" ] && [ -n \"${FABRIC_INSTALLER_VERSION}\" ]; then\r\n    print_info \"Fabric Installer Version: ${FABRIC_INSTALLER_VERSION}\"\r\n  fi\r\n}\r\n\r\n# Function to download files with retries and error handling\r\ndownload_file() {\r\n  local url=\"$1\"\r\n  local output_path=\"$2\"\r\n  local max_retries=3\r\n  local attempt=1\r\n\r\n  print_info \"Downloading $url to $output_path...\"\r\n  while [ $attempt -le $max_retries ]; do\r\n    # Use -L to follow redirects, -f to fail silently on server errors (we check $? manually)\r\n    curl -sSLf -o \"$output_path\" \"$url\"\r\n    local curl_exit_code=$?\r\n    if [ $curl_exit_code -eq 0 ] && [ -s \"$output_path\" ]; then\r\n      print_info \"Download successful.\"\r\n      return 0\r\n    elif [ $curl_exit_code -eq 22 ]; then # HTTP 4xx\/5xx error\r\n        print_warning \"HTTP error during download (URL: $url). Attempt $attempt\/$max_retries.\"\r\n    else\r\n      print_warning \"Download attempt $attempt\/$max_retries failed (curl code: $curl_exit_code). Retrying in 5 seconds...\"\r\n    fi\r\n    sleep 5\r\n    ((attempt++))\r\n  done\r\n  print_error \"Failed to download $url after $max_retries attempts.\"\r\n  return 1\r\n}\r\n\r\n# --- Installation Functions ---\r\n\r\ninstall_vanilla() {\r\n  print_info \"Starting Vanilla Minecraft server installation for ${MINECRAFT_VERSION}...\"\r\n  local version_manifest_list_url=\"https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest_v2.json\" \r\n  \r\n  print_info \"Fetching version manifest list...\"\r\n  local manifest_list_json=$(curl -sSLf \"$version_manifest_list_url\")\r\n  if [ $? -ne 0 ] || [ -z \"$manifest_list_json\" ]; then\r\n    print_error \"Failed to fetch version manifest list from Mojang.\"\r\n  fi\r\n\r\n  local version_url=$(echo \"$manifest_list_json\" | jq -r --arg MC_VERSION \"$MINECRAFT_VERSION\" '.versions[] | select(.id == $MC_VERSION) | .url')\r\n  if [ -z \"$version_url\" ] || [ \"$version_url\" == \"null\" ]; then\r\n    print_error \"Could not find Minecraft version ${MINECRAFT_VERSION} in the Mojang manifest. Please check the version number.\"\r\n  fi\r\n\r\n  print_info \"Fetching details for version ${MINECRAFT_VERSION} from ${version_url}...\"\r\n  local version_data_json=$(curl -sSLf \"$version_url\")\r\n    if [ $? -ne 0 ] || [ -z \"$version_data_json\" ]; then\r\n    print_error \"Failed to fetch version data for ${MINECRAFT_VERSION}.\"\r\n  fi\r\n\r\n  local server_jar_url=$(echo \"$version_data_json\" | jq -r '.downloads.server.url')\r\n  if [ -z \"$server_jar_url\" ] || [ \"$server_jar_url\" == \"null\" ]; then\r\n    print_error \"Could not find server JAR URL for Minecraft ${MINECRAFT_VERSION}.\"\r\n  fi\r\n\r\n  download_file \"$server_jar_url\" \"${SERVER_DIR}\/minecraft_server.${MINECRAFT_VERSION}.jar\"\r\n  standardize_server_jar \"minecraft_server.${MINECRAFT_VERSION}.jar\"\r\n  \r\n  export SERVER_JAR=\"server.jar\"\r\n  print_info \"Vanilla server installation complete. Server JAR set to: ${SERVER_JAR}\"\r\n}\r\n\r\ninstall_fabric() {\r\n  print_info \"Starting Fabric Minecraft server installation for ${MINECRAFT_VERSION}...\"\r\n  \r\n  local fab_installer_ver=\"\"\r\n  if [ -z \"${FABRIC_INSTALLER_VERSION}\" ] || [ \"${FABRIC_INSTALLER_VERSION}\" == \"latest\" ]; then\r\n    print_info \"FABRIC_INSTALLER_VERSION set to 'latest' or empty. Auto-detecting...\"\r\n    local fabric_installer_api_url=\"https:\/\/meta.fabricmc.net\/v2\/versions\/installer\"\r\n    local installer_json=$(curl -sSLf \"$fabric_installer_api_url\")\r\n    if [ $? -ne 0 ] || [ -z \"$installer_json\" ]; then\r\n      print_error \"Failed to fetch Fabric installer versions from meta.fabricmc.net.\"\r\n    fi\r\n    fab_installer_ver=$(echo \"$installer_json\" | jq -r '.[0].version') # Get the very first (latest) installer\r\n    if [ -z \"$fab_installer_ver\" ] || [ \"$fab_installer_ver\" == \"null\" ]; then\r\n      print_error \"Could not determine the latest Fabric Installer version. Please specify FABRIC_INSTALLER_VERSION manually.\"\r\n    fi\r\n    print_info \"Resolved Fabric Installer Version to: ${fab_installer_ver}\"\r\n  else\r\n    fab_installer_ver=\"${FABRIC_INSTALLER_VERSION}\"\r\n    print_info \"Using specified Fabric Installer Version: ${fab_installer_ver}\"\r\n  fi\r\n\r\n  local fabric_installer_url=\"https:\/\/maven.fabricmc.net\/net\/fabricmc\/fabric-installer\/${fab_installer_ver}\/fabric-installer-${fab_installer_ver}.jar\"\r\n\r\n  print_info \"Downloading Fabric installer (tool version ${fab_installer_ver})...\"\r\n  download_file \"$fabric_installer_url\" \"${SERVER_DIR}\/${INSTALLER_JAR_NAME}\"\r\n\r\n  # Resolve \"latest\" or \"snapshot\" for Fabric Loader version if specified\r\n  local effective_modloader_version=\"${MODLOADER_VERSION}\"\r\n  if [ \"${MODLOADER_VERSION}\" == \"latest\" ] || [ \"${MODLOADER_VERSION}\" == \"snapshot\" ]; then\r\n        print_info \"MODLOADER_VERSION set to '${MODLOADER_VERSION}' for Fabric. Auto-detecting latest loader for MC ${MINECRAFT_VERSION}...\"\r\n        \r\n        # Use the direct loader versions endpoint for the specific Minecraft version\r\n        local fabric_loader_api_url=\"https:\/\/meta.fabricmc.net\/v2\/versions\/loader\/${MINECRAFT_VERSION}\"\r\n        local loader_json=$(curl -sSLf \"$fabric_loader_api_url\")\r\n        if [ $? -ne 0 ] || [ -z \"$loader_json\" ] || [ \"$loader_json\" == \"[]\" ]; then\r\n            print_error \"Failed to fetch Fabric loader versions for Minecraft ${MINECRAFT_VERSION}.\"\r\n        fi\r\n\r\n        local stable_filter=\"true\"\r\n        if [ \"${MODLOADER_VERSION}\" == \"snapshot\" ]; then\r\n            stable_filter=\"false\"\r\n        fi\r\n\r\n        # Find the latest stable\/snapshot loader version\r\n        effective_modloader_version=$(echo \"$loader_json\" | jq -r --arg STABLE_FILTER \"$stable_filter\" \\\r\n            '[.[] | select(.loader.stable == ($STABLE_FILTER | fromjson)) | .loader.version] | first')\r\n        \r\n        if [ -z \"$effective_modloader_version\" ] || [ \"$effective_modloader_version\" == \"null\" ]; then\r\n            print_error \"Could not determine the latest Fabric Loader version (stable: ${stable_filter}) for Minecraft ${MINECRAFT_VERSION}. Please specify MODLOADER_VERSION manually or check available versions.\"\r\n        fi\r\n        print_info \"Resolved Fabric Loader Version to: ${effective_modloader_version}\"\r\n    fi\r\n\r\n  print_info \"Running Fabric installer...\"\r\n  local fabric_cmd_args=\"server -mcversion ${MINECRAFT_VERSION} -downloadMinecraft -noprofile\"\r\n  if [ -n \"${effective_modloader_version}\" ]; then\r\n    fabric_cmd_args=\"${fabric_cmd_args} -loader ${effective_modloader_version}\"\r\n    print_info \"Using specific Fabric Loader version: ${effective_modloader_version}\"\r\n  else\r\n    print_info \"Using latest stable Fabric Loader version for ${MINECRAFT_VERSION} (determined by installer).\"\r\n  fi\r\n\r\n  java -jar \"${SERVER_DIR}\/${INSTALLER_JAR_NAME}\" ${fabric_cmd_args}\r\n  if [ $? -ne 0 ]; then\r\n    print_error \"Fabric installer execution failed.\"\r\n  fi\r\n\r\n  if [ ! -f \"${SERVER_DIR}\/fabric-server-launch.jar\" ]; then\r\n    print_error \"fabric-server-launch.jar not found after installation. Check Fabric installer output and versions.\"\r\n  fi\r\n  \r\n  # Aligning with individual Fabric script's file renaming and properties file creation\r\n  if [ -f \"${SERVER_DIR}\/server.jar\" ]; then\r\n    mv \"${SERVER_DIR}\/server.jar\" \"${SERVER_DIR}\/minecraft-server.jar\"\r\n    print_info \"Renamed server.jar to minecraft-server.jar\"\r\n  fi\r\n  mv \"${SERVER_DIR}\/fabric-server-launch.jar\" \"${SERVER_DIR}\/server.jar\"\r\n  print_info \"Renamed fabric-server-launch.jar to server.jar\"\r\n  echo \"serverJar=minecraft-server.jar\" > \"${SERVER_DIR}\/fabric-server-launcher.properties\"\r\n  print_info \"Created fabric-server-launcher.properties\"\r\n\r\n  export SERVER_JAR=\"server.jar\"\r\n  print_info \"Fabric server installation complete. Server JAR set to: ${SERVER_JAR}\"\r\n  rm -f \"${SERVER_DIR}\/${INSTALLER_JAR_NAME}\" # Clean up installer\r\n}\r\n\r\n# Add this helper function near the other helper functions\r\nstandardize_server_jar() {\r\n    local source_jar=\"$1\"\r\n    if [ -f \"${SERVER_DIR}\/${source_jar}\" ]; then\r\n        mv \"${SERVER_DIR}\/${source_jar}\" \"${SERVER_DIR}\/server.jar\"\r\n        print_info \"Renamed ${source_jar} to server.jar\"\r\n        return 0\r\n    fi\r\n    return 1\r\n}\r\n\r\ninstall_forge() {\r\n    print_info \"Starting Forge Minecraft server installation for ${MINECRAFT_VERSION}...\"\r\n    local forge_promo_url=\"https:\/\/files.minecraftforge.net\/net\/minecraftforge\/forge\/promotions_slim.json\"\r\n    \r\n    # Pre-installation cleanup as seen in individual Forge script\r\n    print_info \"Performing pre-installation cleanup for Forge...\"\r\n    rm -rf \"${SERVER_DIR}\/libraries\/net\/minecraftforge\/forge\"\r\n    rm -f \"${SERVER_DIR}\/unix_args.txt\"\r\n    print_info \"Cleanup complete.\"\r\n\r\n    print_info \"Fetching Forge promotions data...\"\r\n    local promo_json=$(curl -sSLf \"$forge_promo_url\")\r\n    local forge_build_version=\"\"\r\n    \r\n    # If MODLOADER_VERSION is specified, use it\r\n    if [ -n \"${MODLOADER_VERSION}\" ] && [ \"${MODLOADER_VERSION}\" != \"latest\" ]; then\r\n        if [[ \"${MODLOADER_VERSION}\" == \"${MINECRAFT_VERSION}-\"* ]]; then\r\n            forge_build_version=$(echo \"${MODLOADER_VERSION}\" | sed \"s\/${MINECRAFT_VERSION}-\/\/\")\r\n        else\r\n            forge_build_version=\"${MODLOADER_VERSION}\"\r\n        fi\r\n        print_info \"Using specified Forge build version: ${forge_build_version} (from MODLOADER_VERSION)\"\r\n    else\r\n        # Try to find version from promotions first\r\n        if [ $? -eq 0 ] && [ -n \"$promo_json\" ]; then\r\n            forge_build_version=$(echo \"$promo_json\" | jq -r --arg MC_VERSION \"$MINECRAFT_VERSION\" '.[$MC_VERSION + \"-recommended\"] \/\/ .[$MC_VERSION + \"-latest\"]')\r\n        fi\r\n\r\n        # If no version found in promotions, try to find the latest version from the Maven metadata\r\n        if [ -z \"$forge_build_version\" ] || [ \"$forge_build_version\" == \"null\" ]; then\r\n            print_info \"No Forge version found in promotions, checking Maven metadata...\"\r\n            local maven_meta_url=\"https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/maven-metadata.xml\"\r\n            local maven_data=$(curl -sSLf \"$maven_meta_url\")\r\n            if [ $? -eq 0 ] && [ -n \"$maven_data\" ]; then\r\n                # Extract versions matching our Minecraft version\r\n                forge_build_version=$(echo \"$maven_data\" | grep -oP \"${MINECRAFT_VERSION}-\\K[0-9.]+\" | tail -n1)\r\n                if [ -n \"$forge_build_version\" ]; then\r\n                    print_info \"Found latest Forge build version from Maven: ${forge_build_version}\"\r\n                fi\r\n            fi\r\n        fi\r\n\r\n        if [ -z \"$forge_build_version\" ] || [ \"$forge_build_version\" == \"null\" ]; then\r\n            print_error \"Could not automatically determine Forge build version for Minecraft ${MINECRAFT_VERSION}. Please specify MODLOADER_VERSION or ensure a recommended\/latest version exists.\"\r\n        fi\r\n        print_info \"Auto-detected Forge build version for ${MINECRAFT_VERSION}: ${forge_build_version}\"\r\n    fi\r\n\r\n    local full_forge_version_string=\"${MINECRAFT_VERSION}-${forge_build_version}\"\r\n    local forge_installer_url=\"https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/${full_forge_version_string}\/forge-${full_forge_version_string}-installer.jar\"\r\n\r\n    print_info \"Downloading Forge installer for ${full_forge_version_string}...\"\r\n    download_file \"$forge_installer_url\" \"${SERVER_DIR}\/${INSTALLER_JAR_NAME}\"\r\n\r\n    print_info \"Running Forge installer...\"\r\n    java -jar \"${SERVER_DIR}\/${INSTALLER_JAR_NAME}\" --installServer\r\n    if [ $? -ne 0 ]; then\r\n      print_error \"Forge installer execution failed.\"\r\n    fi\r\n\r\n    # Look for and rename the shim jar\r\n    local shim_jar=$(find \"${SERVER_DIR}\" -maxdepth 1 -name \"forge-${MINECRAFT_VERSION}-*-shim.jar\" ! -name \"*installer*\" -print -quit)\r\n    if [ -n \"$shim_jar\" ]; then\r\n        standardize_server_jar \"$(basename \"$shim_jar\")\"\r\n        export SERVER_JAR=\"server.jar\"\r\n        print_info \"Found and renamed Forge shim JAR to: server.jar\"\r\n    fi\r\n\r\n    # Create unix_args.txt with proper format in home directory\r\n    if [ -d \"${SERVER_DIR}\/libraries\/net\/minecraftforge\/forge\" ]; then\r\n        local forge_version=$(ls \"${SERVER_DIR}\/libraries\/net\/minecraftforge\/forge\/\" | head -n1)\r\n        if [ -n \"$forge_version\" ]; then\r\n            echo \"@libraries\/net\/minecraftforge\/forge\/${forge_version}\/unix_args.txt\" > \"${SERVER_DIR}\/unix_args.txt\"\r\n            print_info \"Created unix_args.txt with proper library path\"\r\n        fi\r\n    fi\r\n\r\n    # Update the post-installation handling section to prioritize run.sh\r\n    if [ -f \"${SERVER_DIR}\/run.sh\" ]; then\r\n        print_info \"Forge run.sh script found. Making it executable...\"\r\n        chmod +x \"${SERVER_DIR}\/run.sh\"\r\n        \r\n        # Modern Forge uses forge-installer as the server jar\r\n        if [ -f \"${SERVER_DIR}\/forge-installer.jar\" ]; then\r\n            mv \"${SERVER_DIR}\/forge-installer.jar\" \"${SERVER_DIR}\/server.jar\"\r\n            print_info \"Renamed forge-installer.jar to server.jar\"\r\n        fi\r\n        \r\n        # Ensure proper symlinks and file structure\r\n        if [ -d \"${SERVER_DIR}\/libraries\/net\/minecraftforge\/forge\" ]; then\r\n            print_info \"Creating unix_args.txt symlink for modern Forge...\"\r\n            ln -sf \"${SERVER_DIR}\/libraries\/net\/minecraftforge\/forge\/\"*\"\/unix_args.txt\" \"${SERVER_DIR}\/unix_args.txt\"\r\n        fi\r\n        \r\n        export SERVER_JAR=\"server.jar\" # Changed from \"run.sh\" to \"server.jar\"\r\n        print_info \"Server is configured to use server.jar for startup\"\r\n    else\r\n        # Look for the server JAR in priority order\r\n        local found_jar=false\r\n        \r\n        # First try to find the shim jar (newer Forge versions)\r\n        local shim_jar=$(find \"${SERVER_DIR}\" -maxdepth 1 -name \"forge-${MINECRAFT_VERSION}-*-shim.jar\" ! -name \"*installer*\" -print -quit)\r\n        if [ -n \"$shim_jar\" ]; then\r\n            standardize_server_jar \"$(basename \"$shim_jar\")\"\r\n            found_jar=true\r\n        fi\r\n        \r\n        # Try to find the regular forge server jar if shim not found\r\n        if [ \"$found_jar\" = false ]; then\r\n            local forge_jar=$(find \"${SERVER_DIR}\" -maxdepth 1 -name \"forge-${MINECRAFT_VERSION}-*-server.jar\" ! -name \"*installer*\" -print -quit)\r\n            if [ -n \"$forge_jar\" ]; then\r\n                standardize_server_jar \"$(basename \"$forge_jar\")\"\r\n                found_jar=true\r\n            fi\r\n        fi\r\n\r\n        # Try universal jar as last resort\r\n        if [ \"$found_jar\" = false ]; then\r\n            local universal_jar=$(find \"${SERVER_DIR}\" -maxdepth 1 -name \"forge-${MINECRAFT_VERSION}-*-universal.jar\" ! -name \"*installer*\" -print -quit)\r\n            if [ -n \"$universal_jar\" ]; then\r\n                standardize_server_jar \"$(basename \"$universal_jar\")\"\r\n                found_jar=true\r\n            fi\r\n        fi\r\n\r\n        # If we found and renamed a JAR, use standard startup\r\n        if [ \"$found_jar\" = true ]; then\r\n            export SERVER_JAR=\"server.jar\"\r\n            print_info \"Found and renamed Forge JAR to: server.jar\"\r\n        else\r\n            # If we have user_jvm_args.txt, use that even without finding a specific JAR\r\n            if [ -f \"${SERVER_DIR}\/user_jvm_args.txt\" ]; then\r\n                print_info \"Using user_jvm_args.txt for startup configuration\"\r\n                export SERVER_JAR=\"AUTO_FORGE_NEOFORGE_SCRIPT\"\r\n            else\r\n                print_error \"Could not find any valid Forge server JAR files after installation\"\r\n            fi\r\n        fi\r\n    fi\r\n\r\n    # Always create unix_args symlink for 1.17+ if not using run.sh\r\n    if [[ $MINECRAFT_VERSION =~ ^1\\.(17|18|19|20|21|22|23) ]]; then\r\n        if [ -d \"${SERVER_DIR}\/libraries\/net\/minecraftforge\/forge\" ]; then\r\n            print_info \"Creating unix_args.txt symlink for modern Forge...\"\r\n            ln -sf \"${SERVER_DIR}\/libraries\/net\/minecraftforge\/forge\/\"*\"\/unix_args.txt\" \"${SERVER_DIR}\/unix_args.txt\"\r\n        fi\r\n    fi\r\n\r\n    print_info \"Forge server installation complete.\"\r\n    print_info \"IMPORTANT: Use '.\/run.sh' as your startup command in Pterodactyl.\"\r\n    print_info \"Alternative startup: 'java {SERVER_MEMORY} @user_jvm_args.txt @unix_args.txt nogui'\"\r\n    rm -f \"${SERVER_DIR}\/${INSTALLER_JAR_NAME}\"\r\n}\r\n\r\ninstall_neoforge() {\r\n  print_info \"Starting NeoForge Minecraft server installation for ${MINECRAFT_VERSION}...\"\r\n\r\n  # Pre-installation cleanup\r\n  print_info \"Performing pre-installation cleanup for NeoForge...\"\r\n  rm -rf \"${SERVER_DIR}\/libraries\/net\/neoforged\/neoforge\" \"${SERVER_DIR}\/libraries\/net\/neoforged\/forge\"\r\n  rm -f \"${SERVER_DIR}\/unix_args.txt\"\r\n  print_info \"Cleanup complete.\"\r\n\r\n  local effective_neoforge_version=\"\"\r\n  local artifact_name=\"neoforge\"\r\n  local maven_url=\"https:\/\/maven.neoforged.net\/releases\/net\/neoforged\"\r\n\r\n  # Handle 1.20.1 specially as it uses the forge artifact name\r\n  if [[ \"${MINECRAFT_VERSION}\" == \"1.20.1\" ]]; then\r\n    artifact_name=\"forge\"\r\n    local xml_data=$(curl -sSLf \"${maven_url}\/forge\/maven-metadata.xml\" || echo \"\")\r\n  else\r\n    local xml_data=$(curl -sSLf \"${maven_url}\/neoforge\/maven-metadata.xml\" || echo \"\")\r\n  fi\r\n\r\n  if [ -n \"${MODLOADER_VERSION}\" ] && [ \"${MODLOADER_VERSION}\" != \"latest\" ]; then\r\n    effective_neoforge_version=\"${MODLOADER_VERSION}\"\r\n    print_info \"Using specified NeoForge version: ${effective_neoforge_version}\"\r\n  else\r\n    if [ -n \"$xml_data\" ]; then\r\n      if [[ \"${MINECRAFT_VERSION}\" == \"1.20.1\" ]]; then\r\n        # 1.20.1 versions include the MC version\r\n        version_key=\"${MINECRAFT_VERSION}-\"\r\n        effective_neoforge_version=$(echo \"$xml_data\" | grep -oP \"<version>${version_key}[^<]+\" | cut -d'>' -f2 | tail -n1)\r\n      else\r\n        # For newer versions, get version without MC prefix\r\n        effective_neoforge_version=$(echo \"$xml_data\" | grep -oP \"<version>[0-9.]+(-beta)?<\/version>\" | grep -oP \"[0-9.]+(-beta)?\" | tail -n1)\r\n      fi\r\n\r\n      if [ -n \"$effective_neoforge_version\" ]; then\r\n        print_info \"Found NeoForge version from Maven metadata: ${effective_neoforge_version}\"\r\n      else\r\n        print_error \"No valid NeoForge version found for Minecraft ${MINECRAFT_VERSION}\"\r\n      fi\r\n    else\r\n      print_error \"Could not fetch NeoForge version metadata. Server might be down.\"\r\n    fi\r\n  fi\r\n\r\n  # Only add Minecraft version prefix for 1.20.1, not for newer versions\r\n  local download_version\r\n  if [[ \"${MINECRAFT_VERSION}\" == \"1.20.1\" ]]; then\r\n    if [[ ! \"$effective_neoforge_version\" =~ ^${MINECRAFT_VERSION}- ]]; then\r\n      download_version=\"${MINECRAFT_VERSION}-${effective_neoforge_version}\"\r\n    else\r\n      download_version=\"${effective_neoforge_version}\"\r\n    fi\r\n  else\r\n    download_version=\"${effective_neoforge_version}\"\r\n  fi\r\n\r\n  local installer_url=\"${maven_url}\/${artifact_name}\/${download_version}\/${artifact_name}-${download_version}-installer.jar\"\r\n  \r\n  print_info \"Downloading NeoForge installer from ${installer_url}...\"\r\n  if ! download_file \"$installer_url\" \"${SERVER_DIR}\/${INSTALLER_JAR_NAME}\"; then\r\n    print_error \"Failed to download NeoForge installer. This version may not exist or the server might be unavailable.\"\r\n  fi\r\n\r\n  print_info \"Running NeoForge installer...\"\r\n  # Fixed installer command - removed --outputDir flag\r\n  java -jar \"${SERVER_DIR}\/${INSTALLER_JAR_NAME}\" installServer\r\n  if [ $? -ne 0 ]; then\r\n    print_error \"NeoForge installer execution failed. Try increasing memory limits if using unlimited (0) value.\"\r\n  fi\r\n\r\n  # Create symlink for unix args\r\n  print_info \"Setting up NeoForge startup configuration...\"\r\n  ln -sf \"${SERVER_DIR}\/libraries\/net\/neoforged\/${artifact_name}\/\"*\/unix_args.txt \"${SERVER_DIR}\/unix_args.txt\"\r\n  \r\n  # Handle post-installation file setup\r\n  if [ -f \"${SERVER_DIR}\/run.sh\" ]; then\r\n    chmod +x \"${SERVER_DIR}\/run.sh\"\r\n    print_info \"NeoForge run.sh script found and made executable.\"\r\n  fi\r\n\r\n  # Always use server.jar for NeoForge\r\n  if [ -f \"${SERVER_DIR}\/${artifact_name}-server.jar\" ]; then\r\n    standardize_server_jar \"${artifact_name}-server.jar\"\r\n  fi\r\n\r\n  export SERVER_JAR=\"server.jar\"\r\n  print_info \"Server will start using server.jar for startup.\"\r\n  \r\n  # Ensure we have the startup configuration\r\n  if [ -f \"${SERVER_DIR}\/user_jvm_args.txt\" ]; then\r\n    print_info \"Found user_jvm_args.txt for startup configuration.\"\r\n  fi\r\n\r\n  print_info \"NeoForge server installation complete.\"\r\n  rm -f \"${SERVER_DIR}\/${INSTALLER_JAR_NAME}\"\r\n}\r\n\r\n# --- Main Script Logic ---\r\nSECONDS=0 # Start timer\r\n\r\n# Initial setup (apt, mkdir, cd) is handled by the \"Basic Startup\" block at the very top.\r\n\r\ncheck_dependencies\r\ncheck_env_vars # This now reliably resolves MINECRAFT_VERSION \"latest\" or \"snapshot\"\r\n\r\nprint_info \"Starting installation in $(pwd)\"\r\n\r\ncase \"${MOD_LOADER_TYPE}\" in\r\n  vanilla)\r\n    install_vanilla\r\n    ;;\r\n  fabric)\r\n    install_fabric\r\n    ;;\r\n  forge)\r\n    install_forge\r\n    ;;\r\n  neoforge)\r\n    install_neoforge\r\n    ;;\r\n  *)\r\n    print_error \"Unsupported MOD_LOADER_TYPE: '${MOD_LOADER_TYPE}'. Supported types are 'vanilla', 'fabric', 'forge', 'neoforge'.\"\r\n    ;;\r\nesac\r\n\r\nif [ ! -f \"${JAVA_ARGS_FILE}\" ] && ([ \"${MOD_LOADER_TYPE}\" == \"vanilla\" ] || [ \"${MOD_LOADER_TYPE}\" == \"fabric\" ]); then\r\n  print_info \"Creating default ${JAVA_ARGS_FILE} for custom JVM arguments...\"\r\n  echo \"# Add custom Java arguments here, one per line (e.g., -XX:+UseG1GC)\" > \"${JAVA_ARGS_FILE}\"\r\n  echo \"# These will be used if your Pterodactyl egg's startup command includes @${JAVA_ARGS_FILE##*\/}\" >> \"${JAVA_ARGS_FILE}\"\r\nelif [ -f \"${JAVA_ARGS_FILE}\" ]; then\r\n  print_info \"${JAVA_ARGS_FILE} already exists (likely created by Forge\/NeoForge installer).\"\r\nelse\r\n  print_info \"Skipping default ${JAVA_ARGS_FILE} creation as it's not standard for ${MOD_LOADER_TYPE} or handled by its installer.\"\r\nfi\r\n\r\n# Create .serverjar file to specify which JAR to use for startup\r\nif [ -n \"${SERVER_JAR}\" ]; then\r\n  if [ \"${SERVER_JAR}\" == \"AUTO_FORGE_NEOFORGE_SCRIPT\" ]; then\r\n    if [ -f \"${SERVER_DIR}\/run.sh\" ]; then\r\n      echo \"run.sh\" > \"${SERVER_DIR}\/.serverjar\"\r\n      print_info \"Server will start using run.sh\"\r\n    elif [ -f \"${SERVER_DIR}\/server.jar\" ]; then\r\n      echo \"server.jar\" > \"${SERVER_DIR}\/.serverjar\"\r\n      print_info \"Server will start using server.jar\"\r\n    else\r\n      print_warning \"No suitable server jar found for Forge\/NeoForge. Server startup may fail.\"\r\n    fi\r\n  else\r\n    echo \"${SERVER_JAR}\" > \"${SERVER_DIR}\/.serverjar\"\r\n    print_info \"Server will start using ${SERVER_JAR}\"\r\n  fi\r\nelse\r\n  print_warning \"SERVER_JAR variable was not set. This is unexpected. Please check the script and installation logs.\"\r\nfi\r\n\r\nduration=$SECONDS\r\nprint_info \"Minecraft server installation process finished in ${duration} seconds.\"\r\n\r\nif [ -n \"${SERVER_JAR}\" ]; then\r\n    if [ \"${SERVER_JAR}\" == \"AUTO_FORGE_NEOFORGE_SCRIPT\" ] || [ \"${SERVER_JAR}\" == \"run.sh\" ]; then\r\n        print_info \"Your startup command supports both run.sh and JAR-based execution.\"\r\n        print_info \"If startup fails, verify:\"\r\n        print_info \"1. run.sh exists (for run.sh startup)\"\r\n        print_info \"2. user_jvm_args.txt and unix_args.txt exist (for Forge\/NeoForge)\"\r\n        print_info \"3. server.jar exists (for vanilla\/direct JAR startup)\"\r\n    else\r\n        print_info \"Server configured to use ${SERVER_JAR} for startup.\"\r\n    fi\r\nfi\r\n\r\nif [ \"${SERVER_JAR}\" == \"AUTO_FORGE_NEOFORGE_SCRIPT\" ]; then\r\n    if [ ! -f \"${SERVER_DIR}\/run.sh\" ] && [ ! -f \"${SERVER_DIR}\/user_jvm_args.txt\" ]; then\r\n        print_warning \"Critical startup files (run.sh or user_jvm_args.txt) were NOT found for ${MOD_LOADER_TYPE}.  startup may fail.\"\r\n    fi\r\nfi\r\n\r\nprint_info \"Installation script complete. Server files are in ${SERVER_DIR}.\"\r\nexit 0",
            "container": "openjdk:11-jdk-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Minecraft Version",
            "description": "The version of minecraft it will use",
            "env_variable": "MINECRAFT_VERSION",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|between:3,15",
            "field_type": "text"
        },
        {
            "name": "ModLoader Type",
            "description": "The modloader type that the server will be installed with",
            "env_variable": "MOD_LOADER_TYPE",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|in:vanilla,forge,neoforge,fabric",
            "field_type": "text"
        },
        {
            "name": "Modloader Version",
            "description": "The verison that the modloader is when installing",
            "env_variable": "MODLOADER_VERSION",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|between:3,15",
            "field_type": "text"
        },
        {
            "name": "(FABRIC ONLY) Fabric Installer Version",
            "description": "THIS IS FOR FABRIC ONLY\r\nWhat version of the installer will be used",
            "env_variable": "FABRIC_INSTALLER_VERSION",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|between:3,15",
            "field_type": "text"
        },
        {
            "name": "Server Jar File",
            "description": "The name of the Jarfile",
            "env_variable": "SERVER_JARFILE",
            "default_value": "server.jar",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|regex:\/^([\\w\\d._-]+)(\\.jar)$\/",
            "field_type": "text"
        }
    ]
}